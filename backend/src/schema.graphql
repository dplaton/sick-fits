# This is not standard GraphQL, this is Prisma magic
# import * from './generated/prisma.graphql'

# This is an example of a custom type. It's not "a thing" in the backend, it's just something we return
type SuccessMessage {
    message: String
}

type Mutation {
    # Create an item
    createItem(title: String, description: String, price: Int, image: String, largeImage: String): Item!

    # Update an item
    updateItem(id: ID!, title: String, description: String, price: Int): Item!

    # Delete an item
    deleteItem(id: ID!): Item

    # User sign-up
    signUp(email: String!, password: String!, name: String): User

    # User sign-in
    signIn(email: String!, password: String!): User

    # User sign-out
    signOut: SuccessMessage

    requestReset(email: String!):SuccessMessage

    resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
}

type Query {
    # retrieve a list of items
    items(where: ItemWhereInput, skip: Int, first: Int, orderBy: ItemOrderByInput): [Item]

    # retrieve one item
    item(where: ItemWhereUniqueInput!): Item

    # retrieve data about the items (count etc.)
    itemsConnection(where: ItemWhereInput): ItemConnection!

    # retrieves the current user
    me: User
}

# We are re-defining the user because we don't want all the fields of the actual user object in the front-end
# e.g. the reset token
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  permissions: [Permission!]!
}